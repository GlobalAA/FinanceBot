from aiogram import Router
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from callbacks.models import ActionData, ActionType, WithinType
from constants import db
from middlewares import RegisterMiddleware

router = Router(name="main_router")
router.message.middleware(RegisterMiddleware())

@router.message(CommandStart())
async def start_command(message: Message):
	await message.reply("""										 
	–ü—Ä–∏–≤—ñ—Ç, —è –≤–∞—à –±–æ—Ç –¥–ª—è —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ–±–ª—ñ–∫—É (–≥—Ä–∏–≤–Ω—è, –≤ —è–∫–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–æ—ó –≤–∞–ª—é—Ç–∏). üí∞
										 
–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ /spend, —â–æ–± –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ 
–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ /earn, —â–æ–± –¥–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥ 
–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ /all, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –¥–æ—Ö–æ–¥–∏ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç–∏
	""")

@router.message(Command("spend"))
@router.message(Command("earn"))
async def spend_earn_command(message: Message, command: CommandObject):
	args = command.args.split(" ")
	amount = float(args[0])

	if not db.get_user(message.from_user.id):
		return await message.reply("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –±—É–¥—å-–ª–∞—Å–∫–∞ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

	db.add_transaction(message.from_user.id, amount, command.command == "earn")
	return await message.reply(f"–î–æ–¥–∞–Ω–æ {amount} –¥–æ –≤–∞—à–∏—Ö {'–¥–æ—Ö–æ–¥—ñ–≤' if command.command == 'earn' else '–≤–∏—Ç—Ä–∞—Ç'}")

@router.message(Command("all"))
async def all_command(message: Message, command: CommandObject):
	if not db.get_user(message.from_user.id):
		return await message.reply("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –±—É–¥—å-–ª–∞—Å–∫–∞ –ø–æ–≤—ñ–¥–æ–º—Ç–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

	within = "*"
	if (args := command.args) != None:
		args = args.split(" ")
		within = args[0].lower()

	if not within in ["day", "month", "*"]:
		return await message.reply("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /all <day/month>")
	
	transactions = db.get_transactions(message.from_user.id, within)

	builder = InlineKeyboardBuilder()
	builder.button(
		text="–ù–∞–∑–∞–¥",
		callback_data=ActionData(id=0, action=ActionType.back, within=within).pack()
	)
	builder.button(
		text="–î–∞–ª—ñ",
		callback_data=ActionData(id=0, action=ActionType.next, within=within).pack()
	)
	builder.adjust(2)

	texts = f"<b>–°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥—ñ–≤ —ñ –≤–∏—Ç—Ä–∞—Ç –∑–∞ {'–æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å' if within == 'day' else '–≤–µ—Å—å —á–∞—Å' if within == '*' else '–æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å'}</b>\n\n"
	for transaction in transactions[:10]:
		texts += f"{'‚ûï' if transaction.profit else '‚ûñ'} <b>{transaction.amount}</b>–≥—Ä–Ω ({transaction.date})\n"
	
	return await message.reply(texts, reply_markup=builder.as_markup())